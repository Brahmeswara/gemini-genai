Generate java 17, springboot 3.1.7 based micro services with error handling and 
retry mechanisms based on the given schema and openapi specification.
group is com.example and artifact id is lws
entities should have package of com.example.lws.models
add getters and setters to all entities
all arguments and no argument constructors are generated for all entities
restcontrollers should have package of com.example.lws.web
repository java files should have package of com.example.lws.repository
service java files should have package of com.example.lws.services
make sure that both services interface and impl are in the same package of com.example.lws.services
main spring boot application should have package of com.example.lws
make sure to add all imports in the jave files
Use the jakarta.persistence package for all the jpa annotations
"""h2
-- Table: PUBLISHERS
DROP TABLE IF EXISTS PUBLISHERS CASCADE;
CREATE TABLE PUBLISHERS (
    ID INT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255),
    PHONE VARCHAR(255),
    EMAIL VARCHAR(255)
);

-- Table: BOOKS
DROP TABLE IF EXISTS BOOKS CASCADE;
CREATE TABLE BOOKS (
    ID INT PRIMARY KEY,
    TITLE VARCHAR(255) NOT NULL,
    AUTHOR VARCHAR(255),
    PUBLISHER INT NOT NULL,
    YEAROFPUBLICATION YEAR,
    ISBN VARCHAR(255),
    PRICE DECIMAL(10, 2),
    QUANTITYINSTOCK INT DEFAULT 0,
    QUANTITYAVAILABLE INT DEFAULT 0,
    FOREIGN KEY (PUBLISHER) REFERENCES PUBLISHERS(ID)
);

-- Table: VENDORS
DROP TABLE IF EXISTS VENDORS CASCADE;
CREATE TABLE VENDORS (
    ID INT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255),
    PHONE VARCHAR(255),
    EMAIL VARCHAR(255)
);

-- Table: CUSTOMERS
DROP TABLE IF EXISTS CUSTOMERS CASCADE;
CREATE TABLE CUSTOMERS (
    ID INT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255),
    PHONE VARCHAR(255),
    EMAIL VARCHAR(255),
    SUBSCRIPTIONAMOUNT DECIMAL(10, 2),
    SUBSCRIPTIONSTARTDATE DATE,
    SUBSCRIPTIONENDDATE DATE
);

-- Table: RENTALTRANSACTIONS
DROP TABLE IF EXISTS RENTALTRANSACTIONS CASCADE;
CREATE TABLE RENTALTRANSACTIONS (
    ID INT PRIMARY KEY,
    CUSTOMERID INT NOT NULL,
    BOOKID INT NOT NULL,
    RENTALDATE DATE,
    RETURNDATE DATE,
    FINEAMOUNT DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(ID),
    FOREIGN KEY (BOOKID) REFERENCES BOOKS(ID)
);
"""
"""
openapi: 3.0.1
info:
  title: LMS Publishers API
  description: API for managing publishers in the LMS
  version: 1.0.0
servers:
  - url: https://lms.com/publishers
    description: Production environment
  - url: https://qa.lms.com/publishers
    description: QA environment
components:
  schemas:
    Publisher:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier of the publisher
        name:
          type: string
          maxLength: 255
          description: The name of the publisher
        address:
          type: string
          maxLength: 255
          description: The address of the publisher
        phone:
          type: string
          maxLength: 255
          description: The phone number of the publisher
        email:
          type: string
          maxLength: 255
          description: The email address of the publisher
    PublisherList:
      type: array
      items:
        $ref: '#/components/schemas/Publisher'
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The error message
    ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: The field that failed validation
        message:
          type: string
          description: The validation error message
paths:
  /publishers:
    get:
      summary: Get a list of all publishers
      operationId: getPublishers
      tags:
        - Publishers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new publisher
      operationId: createPublisher
      tags:
        - Publishers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /publishers/{name}:
    get:
      summary: Get a publisher by name
      operationId: getPublisherByName
      tags:
        - Publishers
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the publisher to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Edit an existing publisher
      operationId: editPublisher
      tags:
        - Publishers
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the publisher to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
"""
