You are an expert Angulr UI developer.
Given the related publisher and books schema, generate a book search code based on angular ui .
additionally openapi spec also is given as refefence to genrate the ui code.

One should be able to search by By author, By publications, By category, By keyword 
1. Search by author: 
    Provide a search field where users can enter the name of the author. 
    Retrieve all books in your system that match the entered author name. 
    Display the search results to the user. 
2. Search by publication: 
    Provide a search field where users can enter the publication details, such as the publisher or publication year. 
    Retrieve all books in your system that match the entered publication details. 
    Display the search results to the user. 
3. Search by category: 
    Provide a list of categories or genres that users can select from. 
    Allow users to choose a specific category or multiple categories. 
    Retrieve all books in your system that belong to the selected categories. 
    Display the search results to the user. 
4. Search by keyword: 
    Provide a search field where users can enter a keyword related to the book they are looking for.
    Retrieve all books in your system that have the keyword in their title, author, description, or any other relevant fields.
    Display the search results to the user.
"""
-- Drop the table if exists with cascade
DROP TABLE IF EXISTS BOOKS CASCADE;
DROP TABLE IF EXISTS PUBLISHERS CASCADE;

-- Create the PUBLISHERS table
CREATE TABLE PUBLISHERS
(
    ID INT PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255),
    PHONE VARCHAR(20),
    EMAIL VARCHAR(255)
);

-- Create the BOOKS table
CREATE TABLE BOOKS
(
    ID INT PRIMARY KEY,
    TITLE VARCHAR(255) NOT NULL,
    AUTHOR VARCHAR(255),
    PUBLISHER INT REFERENCES PUBLISHERS(ID),
    YEAROFPUBLICATION INT,
    ISBN VARCHAR(20) UNIQUE,
    PRICE DECIMAL(10, 2),
    QUANTITYINSTOCK INT DEFAULT 0,
    QUANTITYAVAILABLE INT DEFAULT 0
);
"""
"""
openapi: 3.0.1
info:
  title: Book Management System API
  description: This API provides CRUD operations for managing books in a library.
  version: 1.0.0
  contact:
    name: John Doe
    email: john.doe@example.com

servers:
  - url: https://lms.com/books
    description: Production environment
  - url: https://qa.lms.com/books
    description: QA environment

paths:
  /books:
    get:
      summary: Get all books
      operationId: getAllBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /books/{title}:
    get:
      summary: Get book by title
      operationId: getBookByTitle
      parameters:
        - name: title
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update book by title
      operationId: updateBookByTitle
      parameters:
        - name: title
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        title:
          type: string
          maxLength: 255
          minLength: 1
        author:
          type: string
          maxLength: 255
          minLength: 1
        publisher:
          type: integer
          format: int64
        yearOfPublication:
          type: integer
          format: int32
        isbn:
          type: string
          pattern: ^[0-9]{10}$
        price:
          type: number
          format: float
        quantityInStock:
          type: integer
          format: int32
        quantityAvailable:
          type: integer
          format: int32
      required:
        - title
        - author
        - publisher
        - yearOfPublication
        - isbn
        - price
        - quantityInStock
        - quantityAvailable
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message
"""
"""
openapi: 3.0.1
info:
  title: LMS Publishers API
  version: "1.0"
servers:
  - url: https://lms.com/publishers
    description: Production environment
  - url: https://qa.lms.com/publishers
    description: QA environment
tags:
  - name: Publishers
paths:
  "/":
    get:
      tags: [Publishers]
      summary: Get list of all publishers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Acme Publishing
                    address:
                      type: string
                      example: 123 Main Street
                    phone:
                      type: string
                      example: (555) 555-5555
                    email:
                      type: string
                      example: info@acmepublishing.com

  "/":
    post:
      tags: [Publishers]
      summary: Create a new publisher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Apex Publishing
                address:
                  type: string
                  example: 456 Elm Street
                phone:
                  type: string
                  example: (555) 555-5556
                email:
                  type: string
                  example: info@apexpublishing.com
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: Apex Publishing
                  address:
                    type: string
                    example: 456 Elm Street
                  phone:
                    type: string
                    example: (555) 555-5556
                  email:
                    type: string
                    example: info@apexpublishing.com

  "/{publisherName}":
    get:
      tags: [Publishers]
      summary: Get a publisher by name
      parameters:
        - name: publisherName
          in: path
          required: true
          schema:
            type: string
            example: Acme Publishing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Acme Publishing
                  address:
                    type: string
                    example: 123 Main Street
                  phone:
                    type: string
                    example: (555) 555-5555
                  email:
                    type: string
                    example: info@acmepublishing.com

    put:
      tags: [Publishers]
      summary: Update a publisher
      parameters:
        - name: publisherName
          in: path
          required: true
          schema:
            type: string
            example: Acme Publishing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: Acme Publishing Inc.
                address:
                  type: string
                  example: 123 Main Street, Suite 100
                phone:
                  type: string
                  example: (555) 555-5555
                email:
                  type: string
                  example: info@acmepublishing.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: Acme Publishing Inc.
                  address:
                    type: string
                    example: 123 Main Street, Suite 100
                  phone:
                    type: string
                    example: (555) 555-5555
                  email:
                    type: string
                    example: info@acmepublishing.com
"""
