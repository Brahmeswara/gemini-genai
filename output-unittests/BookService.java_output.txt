```java
package com.example.lws.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import com.example.lws.models.Book;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class BookServiceTest {

    @Mock
    private BookRepository bookRepository;

    @InjectMocks
    private BookService bookService;

    private Book book;

    @BeforeEach
    public void setUp() {
        book = Book.builder()
                .id(1L)
                .title("Java for Beginners")
                .author("John Doe")
                .build();
    }

    @Test
    public void testSaveBook() {
        when(bookRepository.save(book)).thenReturn(book);

        Book savedBook = bookService.saveBook(book);

        assertEquals(book, savedBook);
    }

    @Test
    public void testUpdateBook() {
        Book updatedBook = Book.builder()
                .id(1L)
                .title("Java for Experts")
                .author("Jane Doe")
                .build();

        when(bookRepository.findById(book.getId())).thenReturn(Optional.of(book));
        when(bookRepository.save(updatedBook)).thenReturn(updatedBook);

        Book savedBook = bookService.updateBook(updatedBook);

        assertEquals(updatedBook, savedBook);
    }

    @Test
    public void testDeleteBook() {
        bookService.deleteBook(book.getId());

        when(bookRepository.findById(book.getId())).thenReturn(Optional.empty());

        Book deletedBook = bookService.getBookById(book.getId());

        assertEquals(Optional.empty(), Optional.ofNullable(deletedBook));
    }

    @Test
    public void testGetBookById() {
        when(bookRepository.findById(book.getId())).thenReturn(Optional.of(book));

        Book foundBook = bookService.getBookById(book.getId());

        assertEquals(book, foundBook);
    }
}
```