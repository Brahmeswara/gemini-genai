package com.example.lws.controllers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.lws.models.Book;
import com.example.lws.services.BookService;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
@SpringBootTest
class BookControllerTest {

    @Mock
    private BookService bookService;

    @InjectMocks
    private BookController bookController;

    private Book book;

    @BeforeEach
    void setUp() {
        book = Book.builder().id(1L).title("Title").author("Author").build();
    }

    @Test
    @DisplayName("Save Book - Success")
    void saveBook_Success() {
        when(bookService.saveBook(book)).thenReturn(book);

        ResponseEntity<Book> response = bookController.saveBook(book);

        assertEquals(response.getStatusCode(), HttpStatus.CREATED);
        assertThat(response.getBody()).isEqualTo(book);
        verify(bookService, times(1)).saveBook(book);
    }

    @Test
    @DisplayName("Save Book - Exception")
    void saveBook_Exception() {
        when(bookService.saveBook(book)).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> bookController.saveBook(book));
        verify(bookService, times(1)).saveBook(book);
    }

    @Test
    @DisplayName("Update Book - Success")
    void updateBook_Success() {
        when(bookService.updateBook(book)).thenReturn(book);

        ResponseEntity<Book> response = bookController.updateBook(book);

        assertEquals(response.getStatusCode(), HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(book);
        verify(bookService, times(1)).updateBook(book);
    }

    @Test
    @DisplayName("Update Book - Exception")
    void updateBook_Exception() {
        when(bookService.updateBook(book)).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> bookController.updateBook(book));
        verify(bookService, times(1)).updateBook(book);
    }

    @Test
    @DisplayName("Delete Book - Success")
    void deleteBook_Success() {
        doNothing().when(bookService).deleteBook(book.getId());

        ResponseEntity<Void> response = bookController.deleteBook(book.getId());

        assertEquals(response.getStatusCode(), HttpStatus.NO_CONTENT);
        verify(bookService, times(1)).deleteBook(book.getId());
    }

    @Test
    @DisplayName("Delete Book - Exception")
    void deleteBook_Exception() {
        doNothing().when(bookService).deleteBook(book.getId());
        doThrow(new RuntimeException()).when(bookService).deleteBook(book.getId());

        assertThrows(RuntimeException.class, () -> bookController.deleteBook(book.getId()));
        verify(bookService, times(1)).deleteBook(book.getId());
    }

    @Test
    @DisplayName("Get Book By Id - Success")
    void getBookById_Success() {
        when(bookService.getBookById(book.getId())).thenReturn(book);

        ResponseEntity<Book> response = bookController.getBookById(book.getId());

        assertEquals(response.getStatusCode(), HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(book);
        verify(bookService, times(1)).getBookById(book.getId());
    }

    @Test
    @DisplayName("Get Book By Id - Not Found")
    void getBookById_NotFound() {
        when(bookService.getBookById(book.getId())).thenReturn(null);

        ResponseEntity<Book> response = bookController.getBookById(book.getId());

        assertEquals(response.getStatusCode(), HttpStatus.NOT_FOUND);
        verify(bookService, times(1)).getBookById(book.getId());
    }

    @Test
    @DisplayName("Get Book By Id - Exception")
    void getBookById_Exception() {
        when(bookService.getBookById(book.getId())).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> bookController.getBookById(book.getId()));
        verify(bookService, times(1)).getBookById(book.getId());
    }

}
"""