```java
package com.example.lws.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import com.example.lws.models.Publisher;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class PublisherServiceTest {

    @Mock
    private PublisherRepository publisherRepository;

    @InjectMocks
    private PublisherService publisherService;

    private Publisher publisher;

    @BeforeEach
    public void setUp() {
        publisher = Publisher.builder()
                .id(1L)
                .name("John Doe")
                .address("123 Main Street")
                .city("Anytown")
                .state("CA")
                .zip("12345")
                .build();
    }

    @Test
    public void testSavePublisher() {
        when(publisherRepository.save(publisher)).thenReturn(publisher);

        Publisher savedPublisher = publisherService.savePublisher(publisher);

        assertEquals(publisher, savedPublisher);
    }

    @Test
    public void testUpdatePublisher() {
        when(publisherRepository.save(publisher)).thenReturn(publisher);

        Publisher updatedPublisher = publisherService.updatePublisher(publisher);

        assertEquals(publisher, updatedPublisher);
    }

    @Test
    public void testDeletePublisher() {
        publisherService.deletePublisher(publisher.getId());

        verify(publisherRepository, times(1)).deleteById(publisher.getId());
    }

    @Test
    public void testGetPublisherById() {
        when(publisherRepository.findById(publisher.getId())).thenReturn(Optional.of(publisher));

        Publisher foundPublisher = publisherService.getPublisherById(publisher.getId());

        assertEquals(publisher, foundPublisher);
    }
}
```