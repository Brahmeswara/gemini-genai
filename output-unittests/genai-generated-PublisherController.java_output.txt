package com.example.lws.controllers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.lws.models.Publisher;
import com.example.lws.services.PublisherService;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;


@ExtendWith(MockitoExtension.class)
public class PublisherControllerTest {

    @Mock
    private PublisherService publisherService;
    @InjectMocks
    private PublisherController publisherController;
    private Publisher publisher;

    @BeforeEach
    void setUp() {
        publisher = Publisher.builder()
            .id(1L)
            .name("Test Publisher")
            .build();
    }

    @Test
    void shouldSavePublisher() {
        when(publisherService.savePublisher(any(Publisher.class))).thenReturn(publisher);

        ResponseEntity<Publisher> responseEntity = publisherController.savePublisher(publisher);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(responseEntity.getBody()).isEqualTo(publisher);
        verify(publisherService, times(1)).savePublisher(any(Publisher.class));
    }

    @Test
    void shouldUpdatePublisher() {
        when(publisherService.updatePublisher(any(Publisher.class))).thenReturn(publisher);

        ResponseEntity<Publisher> responseEntity = publisherController.updatePublisher(publisher);

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(responseEntity.getBody()).isEqualTo(publisher);
        verify(publisherService, times(1)).updatePublisher(any(Publisher.class));
    }

    @Test
    void shouldDeletePublisher() {
        publisherController.deletePublisher(publisher.getId());

        verify(publisherService, times(1)).deletePublisher(anyLong());
    }

    @Test
    void shouldGetPublisherById() {
        when(publisherService.getPublisherById(anyLong())).thenReturn(publisher);

        ResponseEntity<Publisher> responseEntity = publisherController.getPublisherById(publisher.getId());

        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(responseEntity.getBody()).isEqualTo(publisher);
        verify(publisherService, times(1)).getPublisherById(anyLong());
    }
}
"""