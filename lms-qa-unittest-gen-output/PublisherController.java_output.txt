```java
package com.example.lws.controllers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.only;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.lws.models.Publisher;
import com.example.lws.services.PublisherService;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

@RunWith(MockitoJUnitRunner.class)
public class PublisherControllerTest {

    @Mock
    private PublisherService publisherService;

    private PublisherController publisherController;

    @Before
    public void setUp() {
        publisherController = new PublisherController(publisherService);
    }

    @Test
    public void testSavePublisher() {
        Publisher publisher = new Publisher();
        publisher.setId(1L);
        publisher.setName("John Doe");

        when(publisherService.savePublisher(any(Publisher.class))).thenReturn(publisher);

        Publisher actualPublisher = publisherController.savePublisher(publisher);

        verify(publisherService, times(1)).savePublisher(any(Publisher.class));
    }

    @Test
    public void testUpdatePublisher() {
        Publisher publisher = new Publisher();
        publisher.setId(1L);
        publisher.setName("John Doe");

        when(publisherService.updatePublisher(any(Publisher.class))).thenReturn(publisher);

        Publisher actualPublisher = publisherController.updatePublisher(publisher);

        verify(publisherService, times(1)).updatePublisher(any(Publisher.class));
    }

    @Test
    public void testDeletePublisher() {
        Long publisherId = 1L;

        publisherController.deletePublisher(publisherId);

        verify(publisherService, times(1)).deletePublisher(anyLong());
    }

    @Test
    public void testGetPublisherById() {
        Publisher publisher = new Publisher();
        publisher.setId(1L);
        publisher.setName("John Doe");

        when(publisherService.getPublisherById(anyLong())).thenReturn(publisher);

        Publisher actualPublisher = publisherController.getPublisherById(1L);

        verify(publisherService, times(1)).getPublisherById(anyLong());
    }
}
```