```java
package com.example.lws.services;

import com.example.lws.models.Publisher;
import com.example.lws.repository.PublisherRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class PublisherServiceImplTest {

    @InjectMocks
    private PublisherServiceImpl publisherService;

    @Mock
    private PublisherRepository publisherRepository;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void shouldSavePublisher() {
        Publisher publisher = Publisher.builder().name("Test Publisher").build();

        when(publisherRepository.save(any(Publisher.class))).thenReturn(publisher);

        Publisher savedPublisher = publisherService.savePublisher(publisher);

        verify(publisherRepository, times(1)).save(publisher);
        assert savedPublisher != null;
        assert savedPublisher.getId() != null;
    }

    @Test
    public void shouldUpdatePublisher() {
        Publisher publisher = Publisher.builder().id(1L).name("Test Publisher").build();

        when(publisherRepository.save(any(Publisher.class))).thenReturn(publisher);

        Publisher updatedPublisher = publisherService.updatePublisher(publisher);

        verify(publisherRepository, times(1)).save(publisher);
        assert updatedPublisher != null;
        assert updatedPublisher.getId() != null;
    }

    @Test
    public void shouldDeletePublisher() {
        Long publisherId = 1L;

        publisherService.deletePublisher(publisherId);

        verify(publisherRepository, times(1)).deleteById(publisherId);
    }

    @Test
    public void shouldGetPublisherById() {
        Long publisherId = 1L;
        Publisher publisher = Publisher.builder().id(publisherId).name("Test Publisher").build();

        when(publisherRepository.findById(any(Long.class))).thenReturn(Optional.of(publisher));

        Publisher foundPublisher = publisherService.getPublisherById(publisherId);

        verify(publisherRepository, times(1)).findById(publisherId);
        assert foundPublisher != null;
        assert foundPublisher.getId().equals(publisherId);
    }
}
```