package com.example.lws.services;
import com.example.lws.models.Book;
import com.example.lws.repository.BookRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class BookServiceImplTest {
    @Mock
    private BookRepository bookRepository;
    private BookService bookService;

    @BeforeEach
    public void setUp() {
        bookService = new BookServiceImpl(bookRepository);
    }

    @Test
    public void whenSaveBook_shouldReturnSavedBook() {
        // given
        Book book = Book.builder()
                .title("Mockito In Action")
                .author("Mockito Team")
                .build();
        // when
        Book savedBook = bookService.saveBook(book);
        // then
        verify(bookRepository).save(book);
        assertEquals(book.getId(), savedBook.getId());
        assertEquals(book.getTitle(), savedBook.getTitle());
        assertEquals(book.getAuthor(), savedBook.getAuthor());
    }

    @Test
    public void whenUpdateBook_shouldReturnUpdatedBook() {
        // given
        Book existingBook = Book.builder()
                .id(1L)
                .title("Mockito In Action")
                .author("Mockito Team")
                .build();
        Book updatedBook = Book.builder()
                .id(1L)
                .title("Mockito In Action 2nd Edition")
                .author("Mockito Team")
                .build();
        when(bookRepository.findById(1L)).thenReturn(Optional.of(existingBook));
        // when
        Book savedBook = bookService.updateBook(updatedBook);
        // then
        verify(bookRepository).save(updatedBook);
        assertEquals(updatedBook.getId(), savedBook.getId());
        assertEquals(updatedBook.getTitle(), savedBook.getTitle());
        assertEquals(updatedBook.getAuthor(), savedBook.getAuthor());
    }

    @Test
    public void whenDeleteBook_shouldDeleteBook() {
        // given
        Long bookId = 1L;
        // when
        bookService.deleteBook(bookId);
        // then
        verify(bookRepository).deleteById(bookId);
    }

    @Test
    public void whenGetBookById_shouldReturnBook() {
        // given
        Long bookId = 1L;
        Book book = Book.builder()
                .id(1L)
                .title("Mockito In Action")
                .author("Mockito Team")
                .build();
        when(bookRepository.findById(bookId)).thenReturn(Optional.of(book));
        // when
        Book foundBook = bookService.getBookById(bookId);
        // then
        assertEquals(book.getId(), foundBook.getId());
        assertEquals(book.getTitle(), foundBook.getTitle());
        assertEquals(book.getAuthor(), foundBook.getAuthor());
    }
}