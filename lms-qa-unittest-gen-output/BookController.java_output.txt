```java
package com.example.lws.controllers;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.lws.models.Book;
import com.example.lws.services.BookService;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@RunWith(MockitoJUnitRunner.class)
public class BookControllerTest {

    @InjectMocks
    private BookController bookController;

    @Mock
    private BookService bookService;

    private Book book1;
    private Book book2;
    private List<Book> books;

    @Before
    public void setUp() {
        book1 = Book.builder().id(1L).name("Book 1").author("Author 1").isbn("1234567890").build();
        book2 = Book.builder().id(2L).name("Book 2").author("Author 2").isbn("0987654321").build();
        books = new ArrayList<>();
        books.add(book1);
        books.add(book2);
    }

    @Test
    public void testSaveBook() {
        when(bookService.saveBook(any(Book.class))).thenReturn(book1);

        ResponseEntity<Book> response = bookController.saveBook(book1);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(response.getBody()).isEqualTo(book1);
        verify(bookService, times(1)).saveBook(any(Book.class));
    }

    @Test
    public void testUpdateBook() {
        when(bookService.updateBook(any(Book.class))).thenReturn(book1);

        ResponseEntity<Book> response = bookController.updateBook(book1);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(book1);
        verify(bookService, times(1)).updateBook(any(Book.class));
    }

    @Test
    public void testDeleteBook() {
        bookController.deleteBook(1L);

        verify(bookService, times(1)).deleteBook(1L);
    }

    @Test
    public void testGetBookById() {
        when(bookService.getBookById(1L)).thenReturn(Optional.of(book1));

        ResponseEntity<Book> response = bookController.getBookById(1L);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(book1);
        verify(bookService, times(1)).getBookById(1L);
    }

    @Test
    public void testGetAllBooks() {
        when(bookService.getAllBooks()).thenReturn(books);

        ResponseEntity<List<Book>> response = bookController.getAllBooks();

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).isEqualTo(books);
        verify(bookService, times(1)).getAllBooks();
    }
}
```