package com.example.lws.controllers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.example.lws.models.Book;
import com.example.lws.services.BookService;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
class BookControllerTest {

    @InjectMocks
    private BookController bookController;

    @Mock
    private BookService bookService;

    private Book book;

    @BeforeEach
    void setUp() {
        book = Book.builder().id(1L).title("Test Book").author("Test Author").build();
    }

    @Test
    void saveBook() {
        when(bookService.saveBook(any(Book.class))).thenReturn(book);

        ResponseEntity<Book> response = bookController.saveBook(book);

        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(book.getId(), response.getBody().getId());
        assertEquals(book.getTitle(), response.getBody().getTitle());
        assertEquals(book.getAuthor(), response.getBody().getAuthor());
    }

    @Test
    void saveBook_ThrowsException() {
        when(bookService.saveBook(any(Book.class))).thenThrow(new RuntimeException());

        ResponseEntity<Book> response = bookController.saveBook(book);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(null, response.getBody());
    }

    @Test
    void updateBook() {
        when(bookService.updateBook(any(Book.class))).thenReturn(book);

        ResponseEntity<Book> response = bookController.updateBook(book);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(book.getId(), response.getBody().getId());
        assertEquals(book.getTitle(), response.getBody().getTitle());
        assertEquals(book.getAuthor(), response.getBody().getAuthor());
    }

    @Test
    void updateBook_ThrowsException() {
        when(bookService.updateBook(any(Book.class))).thenThrow(new RuntimeException());

        ResponseEntity<Book> response = bookController.updateBook(book);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals(null, response.getBody());
    }

    @Test
    void deleteBook() {
        doNothing().when(bookService).deleteBook(any(Long.class));

        ResponseEntity<Void> response = bookController.deleteBook(1L);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(bookService, times(1)).deleteBook(1L);
    }

    @Test
    void deleteBook_ThrowsException() {
        doThrow(new RuntimeException()).when(bookService).deleteBook(any(Long.class));

        ResponseEntity<Void> response = bookController.deleteBook(1L);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        verify(bookService, times(1)).deleteBook(1L);
    }

    @Test
    void getBookById() {
        when(bookService.getBookById(any(Long.class))).thenReturn(Optional.of(book));

        ResponseEntity<Book> response = bookController.getBookById(1L);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(book.getId(), response.getBody().getId());
        assertEquals(book.getTitle(), response.getBody().getTitle());
        assertEquals(book.getAuthor(), response.getBody().getAuthor());
    }

    @Test
    void getBookById_BookNotFound() {
        when(bookService.getBookById(any(Long.class))).thenReturn(Optional.empty());

        ResponseEntity<Book> response = bookController.getBookById(1L);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertEquals(null, response.getBody());
    }
}
"""